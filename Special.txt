	Count Of Contact:
	
	trigger conTrigger on Contact(after Insert,after update, after delete,after undelete){
	Set<ID> accIDSet = new Set<ID>();
	if(trigger.isafter &&(triiger.insert || trigger.is update || trigger.isUndelete )){
	for(Contact objCon :trigger.new){
	if(objCon.AccountID !=null)
	accIDSet.add(objCon.AccountID);
	}
	
	}
	if(trigger.isafter && trigger.isDelete || trigger.isupdate){

	for(Contact objCon : trigger.old){
	if(objCon.AccountID !=null)
	accIDSet.add(objCon.AccountID);
	}
	}
	Map<ID,Account> accMap = new Map<ID,Account>();
	for(Account objAcc : [Select ID, Name,Count_Of_Contact__c,(Select ID, from Contacts)from Account where ID IN : accIDSet]){
		
		objAcc.Count_Of_Contact__c=objAcc.Contacts.Size();
		accMap.put(objAcc.ID,objAcc);
	
	}
	if(!accMap.isEmpty())
	Database.Update(accMap.values(), false);
	}
	==============================================================
	3] Create a Field Count of Addresses on Applicant Object. Show Count of Addresses on Applicant Object.
	
	trigger countOfAdr on Address__c(after insert, after update, after delete, after undelete){
	
	Set<ID> appIDSet =new  Set<ID>();
	
	if(trigger.isAfter && (trigger.isInsert || trigger.isupdate || trigger.isUpdate)){
	for(Address__c objAdr : trigger.new){
	if(objAdr.Applicant__c !=null)
		appIDSet.add(objAdr.Applicant__c);
	}
	
	}
	if(trigger.isAfter && (trigger.isDelete || trigger.isupdate)){
	for(Address__c objAdr : trigger.old){
	if(objAdr.Applicant__c !=null)
		appIDSet.add(objAdr.Applicant__c);
	}
	}
	Map<ID,Applicant__c> appMap = new Map<ID,Applicant__c>();
	for(Applicant__c objApp : [Select ID,Count_of_address__c ,(Select ID from Addresses__r)from Applicant__c where ID IN :appIDSet ]){
	
	objApp.Count_of_address__c=objApp.Addresses__r.Size();
	appMap.put(objApp.ID,objApp);
	}
	if(!appMap.isEmpty())
	Database.update(appMap.values(),false);
	
	}
	
	===============================================================
	Create a New Contact for an Account. If Account already contains a Contact, then Prevent to create another new contact.

	trigger conTrigger On Contact (before insert,after undelete){
	Set<ID> AccIDSet = new Set<ID>();
	
	for(Contact objCon : trigger.new){
	if(objCon.AccountId !=null)
	AccIDSet.add(objCon.AccountId);
	}
	
	Map<ID,Acoount> accMap =new Map<ID,Acoount>();
	for(Account objAcc : [Select ID, Name,Count_ Of_Contacts__c,(Select ID from Contacts) from Account Where ID IN :AccIDSet]){
		
		accMap.put(objAcc.ID,objAcc);
	}
		for(Contact objCon : trigger.new){
		if(accMap.contaisKey(objCon.AccountID)){
		List<Contact> conList = accMap.get(objCon.AccountID).Contacts;
		if(ConList.Size()>0){
		objCon.AddError('Cant add extra contact');
		}
		}
		}
	}
	===============================================
	User Story 3] There are two object, “Student”, “Subjects”.
Student (Parent)
Subjects (Child) – Subject_Name__c

Prevent Duplicate Subject Name for a Student.
	
	trigger SubjectTrigger on Subject__c(before  Insert, before update, after undelete ){
		
		Set<ID> StudentIDSet = new Set<ID>();
		for(Subject__c objSub : trigger.new){
		StudentIDSet.add(objSub.Student__c);
		}
		Map<ID, Student__c> studentMap = new Map<ID,Student__c>([Select ID, Student_Name__c,(Select ID,Subject_Name__c, Student__c from Subjects__r) from Student__c Where ID IN :StudentIDSet ]);
		
		for(Subject objSub : trigger.new){
		if(studentMap.containsKey(objSub.Student__c)){
		List<Subject__c> subListExisting = studentMap.get(objSub.Student__c).Subjects__r;
		
		for(Subject objSubExisting : subListExisting){
		if(objSub.Subject_Name__c==objSubExisting.Subject_Name__c){
		objSub.Subject_Name__c.addError('This Subject is already Slected');
		}
		}
		}
		}
	}
	==============================================
***** Only one Regional Manager is allowes per object.
	trigger conTrigger on Contact(before Insert,  after undelete){
	Set<ID> accIdSet = new Set<ID>();
	for(Contact objCon : trigger.new){
	if(objCon.AccountID !=null)
	accIdSet.add(objCon.AccountID);
	}
	Map<ID,Account> accMap =new Map<ID,Account>();
	for(Account objAcc :[Select ID, Name,(Select ID,Type from contatcs)  from Account Where Id IN : accIdSet]){
	accMap.Put(objAcc.ID,objAcc);
	
	}
	for(Contact objCon : trigger.new){
	if(accMap.ContainsKey(objCon.AccountID)){
	List<Contact> conList= accMap.get(objCon.AccountID).Contacts;
	if(conList.Size()>0 && objCon.Type=='Regional Manager'){
	objCon.addError('Already One regional manager is there');
	}
	}
	}
	}
	
	========================================
*** only one permonant addresss is allowed 
		
		trigger addressTrigger on Address__c(before insert){
		Set<ID> adrIDSet = new Set<ID>();
		for(Address__c objAdr : trigger.new){
		adrIDSet.add(objAdr.Applicant__c);
		}
		Map<ID,Applianct__c> appMap = new Map<ID,Applianct__c>();
		for(Applianct__c objApp : [Select ID,(Select ID,Type__c from Addresses__r where Type__c='Permonanat Address' from Addresses__r)from Applicant__c where ID IN :adrIDSet]){
		appMap.put(objApp.ID,objApp);
		}
		for(Address__c objAdr : trigger.new){
		if(appMap.ContainsKey(objApp.ID,objApp)){
		List<Address__c> adrList= appMap.get(objAdr.Applicant__c).Addresses__r;
		if(adrList.size()>0 ) {
		objAdr.AddError('Only One Permonant Address Allowed');
		}
		
		}
		}
		}
====================================================================
*** prevrn Duplicate check on document details.

trigger DocumentDetaisTrigger on Document_details__c(before insert){
Set<ID> appIDSet = new Set<ID>();
for(Document_details__c objDoc :trigger.new){
if(objDoc.Applicant__c !=null)
appIDSet.add(objDoc.Applicant__c);
}
Map<Applicant__c> appMap = new Map<Applicant__c>();
for(Applianct__c objApp : [Select ID ,(Selects ID,Type__c from Document_Detaises__r where Type__c='Cheque' from Document_details__r )from Applianct__c Where ID IN : appIDSet]){
appMap.put(objApp.ID,objApp);
}
for(Document_details__c objDoc :trigger.new){
if(appMap.containsKey(objDoc.Applicant__c)){
List<Document_details__c> docList = appMap.get(objDoc.Applicant__c).Document_details__r;
if(docList.size)()>0 {
objDoc.addError(Check is Already Available');
}
}
}
}