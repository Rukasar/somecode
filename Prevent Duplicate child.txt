Prevent duplicate child

1] Prevent Duplicate Contacts having same LeadSource for an Account.

	trigger contactTrigger On Contcat(before insert, before update, after undelete){
	
	Set<ID> accIDSet new Set<ID>();
	for(Contact objCon : trigger.new){
	if(objCon.AccountID !=null)
	accIDSet.add(objCon.AccountID);
	}
	
	Map<ID,Account> accMap =new Map<ID,Account>([Select ID,Name,(Select ID,LeadSource,AccountID from Contacts) from Account where ID IN :accIDSet ]);
	
	for(Contact objCon : trigger.new){
	
	if(accMap.containsKey(objCon.AccountID)){
			list<Contact> conListExist = accMap.get(objCon.AccountID).Contacts;
			
			for(Contact objConExisting :conListExist){
			
			if(objCon.LeadSource)==objConExisting.LeadSource){
			objCon.addError('Same LeadSource='+objCon.LeadSource+'is Already Existon'+accMap.get(objCon.AccountID).Name);
			break;
			}
			}
	}
	}
	}
	

======================
	triggr contactTriggeron Contact(before insert, before update,after undelete){
	Set<ID> accIDSet =new Set<ID>();
	for(Contcat objCon : trigger.new){
		if(objCon.AccountID !=null)
		accIDSet.add(objCon.AccountID); 
	}
	Map<ID,Account> accMap = new Map<ID,Account>([Select ID ,(Select ID, LeadSource,from contcats)from Account Where ID IN :accIDSet]);
	for(Contcat objCon : trigger.new){
		if(accMap.containsKey(objCon.AccountID)){
		list<Contact> conListExisting = accMap.get(objCon.AccountID).contact
			for(Contcat objConExisting : conListExisting){
			if((objCon.LeadSource)==objConExisting.LeadSource){
			objCon.addError('Same Lead Source data is already exist');
					break;
				}
			}
		}
		}
	}



2] Prevent Duplicate Address of Same City for an Applicant only if, Applicant is Eligible for Police Verification.

trigger adrDupTrigger on Address__c (before insert,before update, after undelete){
	
Set<ID> appIDSet =new Set<ID>();
for(Address__c objAdr : trigger.new){
if(objAdr.Applicant__c !=null)
appIDSet.add(objAdr.Applicant__c);
}
Map<ID,Applicant__c> appMap = new Map<ID,Applicant__c>([SELECT ID,Police_Verification__c,(Select ID, City__c from Aaddresses__r) from Applicant__c Where ID IN: appIDSet]);

	for(Address__c objAdr :trigger.new){
	if(appMap.containsKey(objAdr.Applicant__c)){
		List<Address__c> adrListExisting =appMap.get(objAdr.Applicant__c).Aaddresses__r;
		
		for(Address__c objAdrExisting :adrListExisting){
		if(objAdr.City__c==objAdrExisting.City__c  && appMap.get(objAdr.Applicant__c).Police_Verification__c){
		objAdr.addError('This City is already  exist');
			break;
			}
		}
		}
		}
		
		
}

User Story 3] There are two object, “Student”, “Subjects”.
Student (Parent)
Subjects (Child) – Subject_Name__c

Prevent Duplicate Subject Name for a Student.

Student =Parent;
Subject = Child;
	
	trigger subTrigger on Subject__c(before insert, before update, after undelete){
	Set<ID> stuIDSet =new Set<ID>();
	for(Subject objSub : trigger.new){
	if(objSub.Student__c !=null)
		stuIDSet.add(objSub.Student__c);
	}
	Map<ID,Student__c> studentMap =new Map<ID,Student__c>([Select ID,(Select Id, Subject_Name__c from subjects__r) from Student__c Where ID IN :stuIDSet ]);// Child relationship name taken
	for(Subject objSub : trigger.new){
	if(studentMap.containsKey(objSub.Student__c)){
		List<Subject__c> subListExisting = studentMap.get(objSub.Student__c).Subjects__r;
		
		for(Subject objSubExisting :subListExisting ){
		if(objSub.Subject_Name__c ==objSubExisting.Subject_Name__c){
		objSub.addError('This Subject is already taken');
		break;
		}
		}
	}
	}
	}






















