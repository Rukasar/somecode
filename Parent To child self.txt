Parent to childSelf

1] If Account Type is set to the “Prospect”, and If Account’s Opp stage is Closed Lost, then Account Rating should be ‘Hot’.

	trigger accTrigger on Account(before Update){
	
	Map<ID, Account> accMap = trigger.newMap;
	
	List<Opportunity> oppList =new List<Opportunity>();
	
	for(Opportunity objOpp : [Select ID, StageName , AccountID from Opportunity where AccountID IN : accMap.KeySet()]){
	oppList.add(objOpp);
	}
	if(!oppList.isEmpty()){
	for(Opportunity objOpp : oppList){
	if(accMap.containsKey(objOpp.AccountID)){
	if(objOpp.StageName=='Closed Lost' && accMap.get(objOpp.AccountID).Type=='Prospect'){
	accMap.get(objOpp.AccountID).Rating='Hot';
	}
	else{
	accMap.get(objOpp.AccountID).Rating='';
	}
	}
	}
	}
	}
	
	===============================================================================
	Count Of Contact
	
	trigger conTrigger on Contact(after Insert,after update, after delete,after undelete){
	Set<ID> accIDSet = new Set<ID>();
	if(trigger.isafter && (trigger.insert || trigger.is update || trigger.isUndelete )){
	for(Contact objCon :trigger.new){
	if(objCon.AccountID !=null)
	accIDSet.add(objCon.AccountID);
	}
	
	}
	if(trigger.isafter && (trigger.isDelete || trigger.isupdate)){

	for(Contact objCon : trigger.old){
	if(objCon.AccountID !=null)
	accIDSet.add(objCon.AccountID);
	}
	}
	Map<ID,Account> accMap = new Map<ID,Account>();
	for(Account objAcc : [Select ID, Name,Count_Of_Contact__c,(Select ID, from Contacts) from Account where ID IN : accIDSet]){
		
		objAcc.Count_Of_Contact__c=objAcc.Contacts.Size();
		accMap.put(objAcc.ID,objAcc);
	
	}
	if(!accMap.isEmpty())
	Database.Update(accMap.values(), false);
	}
	
	
	==========================
	coc
	trigger CountOfContact on Contact(after Insert, after update, after delete, after undlete){
	
	Set<ID> accIDSet =new Set<ID>();
	
	if(tigger.isAfter &&(trigger.isInsert || trigger.isupdate || trigger.isUndelete)){
	for(Contact objCon : trigger.new){
	if(objCon.AccountID !=null)
	accIDSet.add(objCon.AccountID);
	}
	}
	if(trigger.isafter && (trigger.isdelete || trigger.isupdate)){
	for(Contact objCon : trigger.old){
	if(objCon.AccountID !=null)
	accIDSet.add(objCon.AccountID);
	}
	
	}
	Map<ID,Account> accMap =new Map<ID,Account>();
	for(Account objAcc :[Select ID, Name ,Count_ Of_Contacts__c,(Select ID from Contacts) from Account Where ID IN :accIDSet ]){	
		objAcc.Count_Of_Contact__c=objAcc.Contacts.Size();
		accMap.put(objAcc.ID,objAcc);
	}
	if(!accMap.isEmpty())
	Database.update(accMap.values(),false);
	
	}
	===================================================================================================
	
	Create a New Contact for an Account. If Account already contains a Contact, then Prevent to create another new contact.

	trigger conTrigger On Contact (before insert,after undelete){
	Set<ID> AccIDSet = new Set<ID>();
	
	for(Contact objCon : trigger.new){
	if(objCon.AccountId !=null)
	AccIDSet.add(objCon.AccountId);
	}
	
	Map<ID,Acoount> accMap =new Map<ID,Acoount>();
	for(Account objAcc : [Select ID, Name,Count_ Of_Contacts__c,(Select ID from Contacts) from Account Where ID IN :AccIDSet]){
		
		accMap.put(objAccID,objAcc);
	}
		for(Contact objCon : trigger.new){
		if(accMap.contaisKey(objCon.AccountID)){
		List<Contact> ConList = accMap.get(objCon.AccountID).Contacts;
		if(ConList.Size()>0){
		objCon.AddError('Cant add extra contact');
		}
		}
		}
	}
=======================================	

	3] Create a Field Count of Addresses on Applicant Object. Show Count of Addresses on Applicant Object.
	
	trigger countOfAdr on Address__c(after insert, after update, after delete, after undelete){
	
	Set<ID> appIDSet =new  Set<ID>();
	
	if(trigger.isAfter && (trigger.isInsert || trigger.isupdate || trigger.isUpdate)){
	for(Address__c objAdr : trigger.new){
	if(objAdr.Applicant__c !=null)
		appIDSet.add(objAdr.Applicant__c);
	}
	
	}
	if(trigger.isAfter && (trigger.isDelete || trigger.isupdate)){
	for(Address__c objAdr : trigger.old){
	if(objAdr.Applicant__c !=null)
		appIDSet.add(objAdr.Applicant__c);
	}
	}
	Map<ID,Applicant__c> appMap = new Map<ID,Applicant__c>();
	for(Applicant__c objApp : [Select ID,Count_of_address__c ,(Select ID from Addresses__r)from Applicant__c where ID IN :appIDSet ]){
	
	objApp.Count_of_address__c=objApp.Addresses__r.Size();
	appMap.put(objApp.ID,objApp);
	}
	if(!appMap.isEmpty())
	Database.update(appMap.values(),false);
	
	}
	
	