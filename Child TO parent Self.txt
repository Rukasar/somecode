ChildTo parent Self

1: Create / Update a Contact. If its respective Account’s Rating is “Hot”, then Contact’s Level set to “Primary”. Else None. 

	trigger conTrigger on Contcat(before insert, Before update){
	Set<ID> accIDSet =new Set<ID>();
	for(Contact objCon : trigger.new){
	if(objCon.AccountId !=null)
	accIDSet.add(objCon.AccountId);
	}
	
	Map<ID,Account> accMap = new Map<ID,Account>([Select ID,Name,Rating from Account where ID IN : accIDSet]);
	if(accMap.isEmpty()){
	for(Contact objCon : trigger.new){
	if(accMap.cotainsKey(objCon.AccountId)){
	if(accMap.get(objCon.AccountId).Rating == 'Hot'){
	
	objCon.Level__c='Primary';
	}
	else{
	objCon.Level__c='';
	}
	}
	}
	}
	}
	=================================================================
	2: Create / Update a Contact. Copy Its Respective Account Phone Number to Contact Phone Number. 
	
	trigger conTriggr on Contact(before Insert,before update){
	Set<ID> accIDSet = new Set<ID>();
	for(Contact objCon : trigger.new){
	if(objCon.AccountID !=null)
	accIDSet.add(objCon.AccountID);
	}
	Map<ID, Account> accMap =new Map<ID, Account>([Select Id, Name, Phone from Account Where ID : accIDSet]);
	if(accMap.isEmpty()){
	for(Contact objCon : trigger.new){
	if(accMap.containsKey(objCon.AccountId) && accMap.get(objCon.AccountId).Phone !=null){
	objCon.MobilePhone=accMap.get(objCon.AccountID).Phone;
	}
	}
	}
	}
	=================================================================
	2] Create / Edit the Contact. If It’s respective Account Rating is “Hot”, then Contact’s Level set to the “Primary”. If Rating is “Cold”, 
	then Level set to the “Secondary”,
	If Rating is “Warm”, then Level = “Tertiary”. Else blank.
	
	trigger conTrigger on Contact(before Insert, before update){
	Set<ID> accConSet = new Set<ID>();
	for(Contact objCon : trigger.new){
	if(objCon.AccountID !=null) 
	accConSet.add(objCon.AccountID);
	}
	
	Map<ID,Account> accMap= new Map<ID,Account>([Select ID, Name, Rating From Account where ID IN : accIDSet]);
	
	if(accMap.isEmpty()){
	for(Contact objCon : trigger.new){
	if(accMap.containsKey(objCon.AccountID)){
		if(accMap.get(objCon.AccountId).Rating== 'Hot'){
		objCon.Level__c='Primary';
		}
		else if (accMap.get(objCon.AccountID).Rating=='Cold'){
		objCon.Level__c='Secondary';
		}
		else if(accMap.get(objCon.AccountID).Rating=='Warm'){
		objCon.Level__c='Tertiary';
		}
		else{
		objCon.Level__c='';
		}
	}
	}
	}
	}
	========================================================================
	3] Create Address Record. 
	If new city is “Nagpur”, And its respective Applicant is “Eligible for Police Verification”, 
	then copy Applicant’s PAN Card in the Address’s Pan Card field

	trigger adrTrigger on Addreess__c(before insert, before update){
	Set<ID> accIDSet = new Set<ID>();
	for(Addreess__c objAdr : trigger.new){	
	if(objAdr.Applicant__c !=null)
		accIDSet.add(objAdr.Applicant__c);
	}
	Map<ID,Applicant__c> appMap =new Map<ID,Applicant__c>([Select ID, Police_verification__c,Pan_Card__c from Applicant__c where ID IN : accIDSet]);
	if(!appMap.isEmpty())
	for(Addreess__c objAdr : trigger.new){	
	if(appMap.containsKey(objAdr.Applicant__c)){
	if(objAdr.City__c =='Nagpur' && appMap.get(objAdr.Applicant__c).Police_verification__c){
	
	objAdr.Pan_Card__c= accMap.get(objAdr.Applicant__c).Pan_card_No__c;
	}
	else{
	objAdr.Pan_Card__c='';
	}
	}
	}
	}
	================================================
	1] Create/Edit an Opp. 

If Account Rating is “Hot” or “Warm”, then Opp Type should be “Existing Customer - Upgrade”,  else None.
Copy Account’s SLA into Opp’s Description.

	trigger oppTrigger on Opportunity(before insert, before update){
	Set<ID> accIDSet = new  Set<ID>(;)
	for(Opportunity objOpp : trigger.new){
	if(objOpp.AccountID !=null)
	accIDSet.add(objOpp.AccountID);
	}
	Map<ID,Account> accMap = new Map<ID,Account>([Select ID, Rating, SLA__c from Account Where ID In : accIDSet]);
	if(accMap.isEmpty()){
	for(Opportunity objOpp : trigger.new){
	if(accMap.containskey(objOpp.AccountID)){
	if(accMap.get(objOpp.AccountID).Rating=='Hot' || accMap.get(objOpp.AccountID).Rating=='Warm'){
		objOpp.Type='Existing Customer - Upgrade';
		objOpp.Description=accMap.Get(objOpp.AccountID).Sla__c;
	}
	else{
	objOpp.Type='';
	}
	}
	}
	
	}
	}
	=======================================================================================
	5)Create an Object Customer. Create a Field “Total Balance”.
Create an Object Transaction. Create Picklist Field “Transaction Type” (Deposit, Withdraw). And Currency Field “Amount”.

Where Customer and Transaction Object has Lookup relationship. (Customer   Transaction).

If Transaction Type is “Deposit”  Total Balance = Total Balance + Amount
If Withdraw , then Total Balance  Total Balance – Amount.
						
						
	trigger TrasnsactionTrigger on Traanscation (after insert,after update){
							
	Set<ID> custIDSet =new Set<ID>();
	for(Transaction objTrans : trigger.new){
	if(objTrans.Customer__c !=null)//Checker
	custIDSet.add(objTrans.Customer__c);
	}
							
	Map<ID,Customer__c> custMap = new Map<ID,Customer__c>([SELECT Id,Total_Balance__c FROM Customer__c WHERE ID IN:custIDSet]); 
								
	if(!custMap.isEmpty()){//Checker
	for(Transaction objTrans : trigger.new){
								
	if(custMap.containsKey(objTrans.Customer__c)){
	if(objTrans.Type=='Deposit'){
	custMap.get(objTrans.Customer__c).Total_Balance__c= custMap.get(objTrans.Customer__c).Total_Balance__c +objTrans.Amount__c;
		}
	}
	else if{
	(objTrans.Type=='Withdraw'){
	custMap.get(objTrans.Customer__c).Total_Balance__c= custMap.get(objTrans.Customer__c).Total_Balance__c -objTrans.Amount__c;
	}
	}
	else if(custMap.get(objTrans.Customer__c).Total_Balance__c-objTrans.Amount__c<0;){
	custMap.get(objTrans.Customer__c).addError('Insufficiant Balance');
	}
								
	}
	Database.Update(custMap.values(),false);
							
	}
	}